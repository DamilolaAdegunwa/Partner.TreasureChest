using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.Extensions;
using Abp.Linq.Extensions;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WuLong.Lims.Authorization;
using @Model.AppNameSpace.@(Model.EntityName)s.Dto;

namespace @Model.AppNameSpace
{
    /// <summary>
    /// @(Model.EntityDescription)应用服务
    /// </summary>
    public class @(Model.EntityName)AppService : LimsAppServiceBase, I@(Model.EntityName)AppService
    {
        #region 初始化
        private readonly IRepository<@(Model.EntityName), long> _@(Model.EntityNameLower)Repository;

        public @(Model.EntityName)AppService(IRepository<@(Model.EntityName), long> @(Model.EntityNameLower)Repository)
        {
            _@(Model.EntityNameLower)Repository = @(Model.EntityNameLower)Repository;
        }
        #endregion

        public async Task<PagedResultDto<@(Model.EntityName)ListDto>> GetPaged@(Model.EntityName)(Get@(Model.EntityName)PagedInput input)
        {
            var query = _@(Model.EntityNameLower)Repository.GetAll()
                .WhereIf(!input.Name.IsNullOrWhiteSpace(), s => s.Name.Contains(input.Name));

            var totalCount = await query.CountAsync();//总数
            var items = await query.PageBy(input).ToListAsync();

            return new PagedResultDto<@(Model.EntityName)ListDto>(
                totalCount,
                items.Select(item =>
                {
                    var dto = ObjectMapper.Map<@(Model.EntityName)ListDto>(item);
                    dto.LastModificationTime = item.LastModificationTime.HasValue ? item.LastModificationTime.Value : item.CreationTime;
                    return dto;
                })
                .ToList());
        }

        public async Task<Get@(Model.EntityName)ForEditOutput> Get@(Model.EntityName)ForEdit(NullableIdDto<long> input)
        {
            var get@(Model.EntityName)ForEdit = new Get@(Model.EntityName)ForEditOutput()
            {
                @(Model.EntityName) = new @(Model.EntityName)EditDto()
            };

            if (input.Id.HasValue && input.Id.Value > 0)
            {
                var @(Model.EntityNameLower) = await _@(Model.EntityNameLower)Repository.GetAsync(input.Id.Value);
                get@(Model.EntityName)ForEdit.@(Model.EntityName) = ObjectMapper.Map<@(Model.EntityName)EditDto>(@(Model.EntityNameLower));
            }

            return get@(Model.EntityName)ForEdit;
        }

        public async Task CreateOrUpdate@(Model.EntityName)(CreateOrUpdate@(Model.EntityName)Input input)
        {
            if (input.@(Model.EntityName).Id.HasValue && input.@(Model.EntityName).Id.Value > 0)
            {
                await Update@(Model.EntityName)(input);
            }
            else
            {
                await Create@(Model.EntityName)(input);
            }
        }

        /// <summary>
        /// 添加@(Model.EntityDescription)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task Create@(Model.EntityName)(CreateOrUpdate@(Model.EntityName)Input input)
        {
            var @(Model.EntityNameLower) = ObjectMapper.Map<@(Model.EntityName)>(input.@(Model.EntityName));
            await _@(Model.EntityNameLower)Repository.InsertAsync(@(Model.EntityNameLower));
        }

        /// <summary>
        /// 更新@(Model.EntityDescription)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task Update@(Model.EntityName)(CreateOrUpdate@(Model.EntityName)Input input)
        {
            var @(Model.EntityNameLower) = await _@(Model.EntityNameLower)Repository.GetAsync(input.@(Model.EntityName).Id.Value);
            ObjectMapper.Map(input.@(Model.EntityName), @(Model.EntityNameLower));
            await _@(Model.EntityNameLower)Repository.UpdateAsync(@(Model.EntityNameLower));
        }

        public async Task Delete@(Model.EntityName)(List<EntityDto<long>> inputs)
        {
            foreach (var input in inputs)
            {
                await _@(Model.EntityNameLower)Repository.DeleteAsync(input.Id);
            }
        }
    }
}